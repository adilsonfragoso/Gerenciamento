# -------------------------------------------------------------
# alimenta_relatorios_vendas.py
#
# Script automatizado para baixar relat√≥rios de vendas do painel
# Litoral da Sorte e inserir diretamente na tabela 'relatorios_vendas'
# com novos campos e estrutura aprimorada.
#
# Funcionalidades principais:
# - Faz login no painel web com Selenium (login √∫nico)
# - Processa uma ou m√∫ltiplas edi√ß√µes de sorteio
# - Baixa o CSV de vendas de cada edi√ß√£o
# - Insere dados diretamente na tabela 'relatorios_vendas'
# - Ordena inser√ß√µes por data/hora crescente
# - Separa horadata em campos 'data' e 'horacompra'
# - Adiciona novos campos: valor_cota, aprovado_por, host_pagamento, numeros
# - Remove o CSV ap√≥s o processamento
# - Continua processamento mesmo se edi√ß√µes n√£o existirem
#
# Formatos de uso:
# - Edi√ß√£o √∫nica:      python alimenta_relatorios_vendas.py 5197
# - M√∫ltiplas edi√ß√µes: python alimenta_relatorios_vendas.py 5197 6020 6040 6700  
# - Sequ√™ncia:         python alimenta_relatorios_vendas.py 5197-6020
# -------------------------------------------------------------

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from time import sleep
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.keys import Keys
from selenium.common.exceptions import TimeoutException, NoSuchElementException, ElementClickInterceptedException
import unidecode
import os
import sys
import pandas as pd
import mysql.connector
import glob
from datetime import datetime, timedelta

# Importar configura√ß√£o do banco
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from app.db_config import DB_CONFIG

# ===================== CONFIGURA√á√ÉO =====================
HEADLESS = False  # False para debug, True para produ√ß√£o
driver_path = r"D:\Documentos\Workspace\chromedriver.exe"
caminho_downloads = r"D:\Adilson\Downloads"
service = Service(driver_path)

def criar_navegador():
    if HEADLESS:
        opts = Options()
        opts.add_argument('--headless=new')
        opts.add_argument('--disable-gpu')
        opts.add_argument('--no-sandbox')
        opts.add_argument('--window-size=1920,1080')
        return webdriver.Chrome(service=service, options=opts)
    else:
        return webdriver.Chrome(service=service)

def fazer_login(navegador):
    print("üîê Fazendo login...")
    navegador.get("https://painel.litoraldasorte.com")
    sleep(2)
    navegador.execute_script("window.print = function(){};")
    navegador.find_element(By.NAME, "email").send_keys("Dev2")
    navegador.find_element(By.NAME, "password").send_keys("453629")
    navegador.find_element(By.CSS_SELECTOR, "button[type='submit']").click()
    sleep(3)
    print("‚úÖ Login realizado")

def fechar_popup(navegador):
    try:
        btn = WebDriverWait(navegador, 5).until(
            EC.element_to_be_clickable((By.XPATH, "//button[normalize-space(text())='Entendi']"))
        )
        btn.click()
        WebDriverWait(navegador, 5).until(
            EC.invisibility_of_element_located((By.CSS_SELECTOR, "div.MuiDialog-container"))
        )
        print("‚úÖ Pop-up fechado")
    except TimeoutException:
        pass

def limpar_overlays(navegador):
    """Remove overlays que bloqueiam cliques"""
    try:
        # Pressionar ESC para fechar modais
        body = navegador.find_element(By.TAG_NAME, "body")
        for _ in range(3):
            body.send_keys(Keys.ESCAPE)
            sleep(0.3)
        
        # Remover backdrops via JavaScript
        navegador.execute_script("""
            document.querySelectorAll('div.MuiBackdrop-root').forEach(backdrop => {
                if (backdrop.style.opacity !== '0') {
                    backdrop.remove();
                }
            });
        """)
        
        sleep(1)
        print("üßπ Overlays removidos")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Aviso limpeza: {e}")

def limpar_campo_busca(navegador):
    """Limpa completamente o campo de busca"""
    try:
        campo = navegador.find_element(By.XPATH, "//input[@placeholder='Pesquisar por t√≠tulo do sorteio...']")
        campo.click()
        sleep(0.3)
        
        # Selecionar tudo e deletar
        campo.send_keys(Keys.CONTROL + "a")
        sleep(0.2)
        campo.send_keys(Keys.DELETE)
        sleep(0.2)
        
        # Garantir que est√° vazio via JavaScript
        navegador.execute_script("arguments[0].value = '';", campo)
        navegador.execute_script("arguments[0].dispatchEvent(new Event('input', { bubbles: true }));", campo)
        
        print("üßπ Campo de busca limpo")
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao limpar campo: {e}")
        return False

def navegar_para_sorteios(navegador):
    try:
        # Limpar qualquer overlay
        limpar_overlays(navegador)
        
        # Tentar clicar no menu sorteios
        menu_xpath = '//*[@id="root"]/div/div/div/div/div/div/div[1]/div[2]/div/div/div/div[2]/ul[1]/div[2]/div[2]/span'
        
        # Aguardar elemento estar clic√°vel
        menu = WebDriverWait(navegador, 10).until(
            EC.element_to_be_clickable((By.XPATH, menu_xpath))
        )
        
        # Usar JavaScript para garantir o clique
        navegador.execute_script("arguments[0].scrollIntoView(true);", menu)
        sleep(1)
        navegador.execute_script("arguments[0].click();", menu)
        sleep(2)
        
        # Limpar campo de busca ap√≥s navegar
        limpar_campo_busca(navegador)
        
        print("üìã Navegando para sorteios...")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao navegar para sorteios: {e}")
        return False

def extrair_sigla_do_arquivo(caminho_csv):
    """Extrai a sigla do nome do arquivo CSV aplicando as regras corretas"""
    try:
        nome_arquivo = os.path.basename(caminho_csv)
        
        # Remove prefixo e sufixo
        if nome_arquivo.startswith("relatorio-vendas-"):
            nome_sem_prefixo = nome_arquivo[17:]  # Remove "relatorio-vendas-"
            nome_sem_sufixo = nome_sem_prefixo.replace(".csv", "")  # Remove ".csv"
            
            # Converter h√≠fens para espa√ßos e deixar em mai√∫sculo
            texto_processado = nome_sem_sufixo.replace("-", " ").upper()
            
            # Aplicar as regras de extra√ß√£o
            if " RJ " in texto_processado:
                # Se cont√©m "RJ", a sigla √© o que vem antes de "RJ"
                sigla = texto_processado.split(" RJ ")[0].strip()
            elif " EDICAO " in texto_processado:
                # Se n√£o cont√©m "RJ", a sigla √© o que vem antes de "EDICAO"
                sigla = texto_processado.split(" EDICAO ")[0].strip()
            else:
                return None
                
            print(f"Sigla extra√≠da do arquivo: '{sigla}'")
            return sigla
                
    except Exception as e:
        print(f"Erro ao extrair sigla do arquivo: {e}")
    
    return None

def obter_horario_por_extracao(sigla_extraida):
    """
    Retorna o hor√°rio espec√≠fico baseado na extra√ß√£o/sigla
    Reconhece varia√ß√µes como 'PT ESPECIAL', 'FEDERAL ESPECIAL', etc.
    IMPORTANTE: Verifica siglas mais espec√≠ficas primeiro para evitar confus√£o
    """
    # Converter para mai√∫sculo e remover espa√ßos extras
    sigla = sigla_extraida.upper().strip()
    
    # Mapeamento de hor√°rios por extra√ß√£o - ORDEM IMPORTANTE (mais espec√≠ficos primeiro)
    horarios = [
        ('CORUJINHA', '21:30:00'),
        ('FEDERAL', '19:00:00'),
        ('PPT', '09:20:00'),
        ('PTM', '11:20:00'), 
        ('PTN', '18:20:00'),
        ('PTV', '16:20:00'),
        ('PT', '14:20:00'),  # PT deve vir DEPOIS de PTN e PTV para n√£o confundir
    ]
    
    # Verificar se a sigla cont√©m alguma das extra√ß√µes (verificando as mais espec√≠ficas primeiro)
    for extracao_base, horario in horarios:
        if extracao_base in sigla:
            print(f"üïê Hor√°rio definido para '{sigla}': {horario} (baseado em '{extracao_base}')")
            return horario
    
    # Se n√£o encontrar correspond√™ncia, retornar hor√°rio padr√£o
    print(f"‚ö†Ô∏è Extra√ß√£o n√£o reconhecida '{sigla}', usando hor√°rio padr√£o: 12:00:00")
    return '12:00:00'

def processar_csv_e_inserir(edicao_desejada, caminho_csv):
    """Processa o CSV e insere os dados na tabela relatorios_vendas"""
    
    # Extrair sigla do nome do arquivo
    sigla_extraida = extrair_sigla_do_arquivo(caminho_csv)
    
    if not sigla_extraida:
        print("ERRO: N√£o foi poss√≠vel extrair a sigla do arquivo. Verifique o nome do arquivo CSV.")
        return False

    # Verifica se o CSV existe
    if not os.path.exists(caminho_csv):
        print(f"ERRO: O arquivo CSV n√£o foi encontrado: {caminho_csv}")
        return False

    try:
        # 1) Ler o CSV ignorando a 1a linha (cabe√ßalho) e sem usar nomes de coluna (header=None)
        df = pd.read_csv(
            caminho_csv,
            sep=';',
            encoding='utf-8',
            skiprows=1,
            header=None
        )

        # Mapeamento das colunas (A=0, B=1, C=2, etc.)
        df_nome = df.iloc[:, 6]      # G - nome
        df_telefone = df.iloc[:, 7]  # H - telefone
        df_qtd = df.iloc[:, 3]       # D - quantidade (qtd na nova tabela)
        df_total = df.iloc[:, 5]     # F - valorTotal j√° calculado (total da compra)
        df_horadata = df.iloc[:, 13] # N - horadata (ser√° separado em data e horacompra)
        
        # Novas colunas espec√≠ficas
        # valor_cota ser√° calculado: coluna 5 (total) √∑ coluna 3 (qtd) = valor unit√°rio
        df_aprovado_por = df.iloc[:, 16]  # Q - aprovado_por (coluna 16)
        df_host_pagamento = df.iloc[:, 15] # P - host_pagamento (coluna 15)
        df_numeros = df.iloc[:, 20]       # U - numeros (coluna 20)

        # 2) Conex√£o ao MySQL
        conn = mysql.connector.connect(**DB_CONFIG)
        cursor = conn.cursor()

        # Verifica se j√° existe registro para esta edi√ß√£o em relatorios_importados
        sql_check = """
            SELECT COUNT(*) FROM relatorios_importados WHERE edicao = %s
        """
        cursor.execute(sql_check, (edicao_desejada,))
        existe = cursor.fetchone()[0]

        if existe != 0:
            print(f"Edi√ß√£o {edicao_desejada} j√° existe em relatorios_importados. Nada ser√° inserido.")
            conn.close()
            return False

        # 3) PRIMEIRO: Calcular total de cotas e obter maior data do CSV
        total_cotas = 0
        maior_data = None
        
        for i in range(len(df)):
            # Somar cotas
            try:
                total_cotas += int(df_qtd.iloc[i])
            except:
                continue
            
            # Encontrar a maior data
            try:
                data_registro = datetime.strptime(str(df_horadata.iloc[i]).strip(), "%d/%m/%Y, %H:%M:%S")
                if maior_data is None or data_registro > maior_data:
                    maior_data = data_registro
            except:
                continue
        
        # Se n√£o conseguiu extrair nenhuma data, usar data atual
        if maior_data is None:
            maior_data = datetime.now()
        
        # Obter hor√°rio espec√≠fico baseado na extra√ß√£o
        horario_extracao = obter_horario_por_extracao(sigla_extraida)
        
        # Combinar a maior data com o hor√°rio da extra√ß√£o
        data_final = datetime.combine(maior_data.date(), datetime.strptime(horario_extracao, "%H:%M:%S").time())
        
        # Inserir em relatorios_importados PRIMEIRO
        sql_insert_rel = """
            INSERT INTO relatorios_importados (edicao, total_cotas, data, Extracao)
            VALUES (%s, %s, %s, %s)
        """
        cursor.execute(sql_insert_rel, (edicao_desejada, total_cotas, data_final, sigla_extraida))
        print(f"‚úÖ Registro pai criado em relatorios_importados: edi√ß√£o {edicao_desejada}, total_cotas={total_cotas}, data={data_final.strftime('%Y-%m-%d %H:%M:%S')}")

        # 4) SEGUNDO: Preparar INSERT para relatorios_vendas (tabela filha)
        sql_insert = """
            INSERT INTO relatorios_vendas (nome, telefone, edicao, extracao, qtd, total, data, horacompra, valor_cota, aprovado_por, host_pagamento, numeros)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
        """

        total_inseridos = 0

        # 5) Preparar dados para inser√ß√£o com ordena√ß√£o por horadata
        dados_para_inserir = []
        
        for i in range(len(df)):
            nome = str(df_nome.iloc[i]).strip()
            telefone = str(df_telefone.iloc[i]).strip()
            edicao = edicao_desejada

            try:
                qtd = int(df_qtd.iloc[i])
            except:
                qtd = 0

            try:
                total = float(str(df_total.iloc[i]).replace(',', '.'))
            except:
                total = 0.0

            # Calcular valor_cota = total √∑ quantidade
            try:
                if qtd > 0:
                    valor_cota = total / qtd
                else:
                    valor_cota = 0.0
            except:
                valor_cota = 0.0

            aprovado_por = str(df_aprovado_por.iloc[i]).strip()
            host_pagamento = str(df_host_pagamento.iloc[i]).strip()
            numeros = str(df_numeros.iloc[i]).strip()

            # Processar data/hora da coluna 13 e separar em data e horacompra
            try:
                data_hora_completa = datetime.strptime(str(df_horadata.iloc[i]).strip(), "%d/%m/%Y, %H:%M:%S")
                data_compra = data_hora_completa.date()  # Apenas a data
                hora_compra = data_hora_completa.time()  # Apenas a hora
            except Exception as e:
                print(f"Erro ao converter data/hora para o registro {i}: {df_horadata.iloc[i]} - {e}")
                data_compra = None
                hora_compra = None

            # Ordem: nome, telefone, edicao, extracao, qtd, total, data, horacompra, valor_cota, aprovado_por, host_pagamento, numeros
            dados_para_inserir.append((
                nome, telefone, edicao, sigla_extraida, qtd, total, 
                data_compra, hora_compra, valor_cota, aprovado_por, host_pagamento, numeros,
                data_hora_completa  # Para ordena√ß√£o (n√£o ser√° inserido)
            ))
        
        # Ordenar dados por horadata (ordem crescente) - usar o √∫ltimo elemento para ordena√ß√£o
        dados_para_inserir.sort(key=lambda x: x[12] if x[12] is not None else datetime.min)
        
        # 6) Inserir dados ordenados no banco relatorios_vendas (removendo o campo de ordena√ß√£o)
        for valores in dados_para_inserir:
            # Remover o √∫ltimo elemento (data_hora_completa usado s√≥ para ordena√ß√£o)
            valores_para_inserir = valores[:12]
            cursor.execute(sql_insert, valores_para_inserir)
            total_inseridos += 1

        # 7) Confirmar todas as transa√ß√µes
        conn.commit()
        print(f"‚úÖ {total_inseridos} linhas inseridas em 'relatorios_vendas' com sucesso!")
        return True

    except mysql.connector.Error as err:
        print(f"‚ùå Erro ao conectar ou inserir no banco: {err}")
        return False

    except Exception as e:
        print(f"‚ùå Erro ao ler CSV ou processar dados: {e}")
        return False

    finally:
        if 'conn' in locals() and conn.is_connected():
            cursor.close()
            conn.close()

def processar_edicao(navegador, edicao):
    print(f"\nüöÄ Processando edi√ß√£o: {edicao}")
    
    # Buscar edi√ß√£o
    try:
        # Garantir que campo est√° limpo antes de digitar
        limpar_campo_busca(navegador)
        sleep(1)
        
        campo = navegador.find_element(By.XPATH, "//input[@placeholder='Pesquisar por t√≠tulo do sorteio...']")
        campo.click()
        sleep(0.5)
        campo.send_keys(str(edicao))
        sleep(1)
        print(f"üîç Buscando: {edicao}")
    except NoSuchElementException:
        print(f"‚ùå Campo busca n√£o encontrado: {edicao}")
        return False

    # Verificar se encontrou algum resultado
    try:
        # Aguardar um pouco para carregar resultados
        sleep(1)
        
        # Verificar se tem bot√£o "Compras" (indica que edi√ß√£o existe)
        compras_btn = navegador.find_element(By.XPATH, "//button[@aria-label='Compras']")
        print(f"‚úÖ Edi√ß√£o {edicao} encontrada")
        
    except NoSuchElementException:
        print(f"‚ùå Edi√ß√£o {edicao} n√£o existe")
        return False

    # Clicar em Compras
    try:
        compras_btn.click()
        sleep(1)
        
        # Navegar com TAB
        actions = ActionChains(navegador)
        for _ in range(6):
            actions.send_keys(Keys.TAB).pause(0.1)
        actions.send_keys(Keys.ENTER).perform()
        sleep(1)
        
        # Clicar em Relat√≥rio de Vendas
        rel = WebDriverWait(navegador, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//li//div[contains(text(), 'Relat√≥rio de Vendas')]"))
        )
        rel.click()
        sleep(1)
        print("‚úÖ Relat√≥rio selecionado")
        
    except Exception as e:
        print(f"‚ùå Erro relat√≥rio {edicao}: {e}")
        return False

    # Capturar t√≠tulo com m√∫ltiplas tentativas
    titulo = None
    seletores_titulo = [
        # Seletor principal
        '//*[@id="root"]/div/main/div/div/div[2]/div[1]/div[1]/div/div/div[1]/div[2]/div/div/div/div/div/div/div/div[1]/div/div[1]/div/h4',
        # Seletores alternativos
        "//h4[contains(@class, 'MuiTypography')]",
        "//div[contains(@class, 'MuiGrid')]//h4",
        "//h4",
        "//div[@role='dialog']//h4"
    ]
    
    for i, seletor in enumerate(seletores_titulo):
        try:
            titulo_elem = navegador.find_element(By.XPATH, seletor)
            titulo = titulo_elem.text.strip()
            if titulo and len(titulo) > 10:  # T√≠tulo v√°lido deve ter mais de 10 caracteres
                print(f"‚úÖ T√≠tulo capturado (seletor {i+1}): {titulo}")
                break
        except Exception as e:
            print(f"‚ö†Ô∏è Seletor {i+1} falhou: {e}")
            continue
    
    if not titulo:
        print(f"‚ùå N√£o foi poss√≠vel capturar t√≠tulo para edi√ß√£o {edicao}")
        return False
        
    slug = unidecode.unidecode(titulo.lower().replace(" ", "-"))
    nome_arquivo = f"relatorio-vendas-{slug}.csv"
    caminho_csv = os.path.join(caminho_downloads, nome_arquivo)
    print(f"üìÑ Arquivo esperado: {nome_arquivo}")

    # Aguardar download com busca mais robusta
    print("‚è≥ Aguardando download...")
    arquivo_encontrado = None
    
    for seg in range(15):  # Aumentar tempo de espera
        # Verificar arquivo pelo nome exato
        if os.path.exists(caminho_csv):
            arquivo_encontrado = caminho_csv
            print(f"‚úÖ CSV baixado em {seg}s: {nome_arquivo}")
            break
        
        # Busca alternativa: procurar arquivos CSV recentes com padr√£o similar
        try:
            import glob
            from datetime import datetime, timedelta
            
            # Buscar arquivos CSV na pasta downloads modificados nos √∫ltimos 2 minutos
            padrao = os.path.join(caminho_downloads, "relatorio-vendas-*.csv")
            arquivos_csv = glob.glob(padrao)
            
            for arquivo in arquivos_csv:
                # Verificar se foi modificado recentemente (√∫ltimos 2 minutos)
                tempo_modificacao = datetime.fromtimestamp(os.path.getmtime(arquivo))
                if datetime.now() - tempo_modificacao < timedelta(minutes=2):
                    # Verificar se cont√©m a edi√ß√£o no nome
                    if str(edicao) in os.path.basename(arquivo):
                        arquivo_encontrado = arquivo
                        print(f"‚úÖ CSV encontrado por busca alternativa em {seg}s: {os.path.basename(arquivo)}")
                        break
            
            if arquivo_encontrado:
                break
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na busca alternativa: {e}")
        
        sleep(1)
    
    if not arquivo_encontrado:
        print(f"‚ùå CSV n√£o baixou: {edicao}")
        # Debug: listar arquivos recentes para diagn√≥stico
        try:
            import glob
            padrao = os.path.join(caminho_downloads, "relatorio-vendas-*.csv")
            arquivos_recentes = glob.glob(padrao)
            if arquivos_recentes:
                print(f"üîç Arquivos CSV encontrados na pasta:")
                for arq in arquivos_recentes[-3:]:  # Mostrar √∫ltimos 3
                    print(f"   - {os.path.basename(arq)}")
        except:
            pass
        return False
    
    # Atualizar caminho do CSV para o arquivo encontrado
    caminho_csv = arquivo_encontrado

    # Processar CSV e inserir no banco
    print("üìä Processando dados para tabela relatorios_vendas...")
    sucesso = processar_csv_e_inserir(edicao, caminho_csv)

    # Remover CSV
    try:
        os.remove(caminho_csv)
        print(f"üóëÔ∏è CSV removido")
    except:
        pass

    return sucesso

def parsear_argumentos(args):
    """
    Processa argumentos de entrada para suportar diferentes formatos:
    - Edi√ß√£o √∫nica: 5197
    - Edi√ß√µes intercaladas: 5197 6020 6040 6700
    - Sequ√™ncia: 5197-6020
    """
    edicoes = []
    
    for arg in args:
        if '-' in arg and arg.count('-') == 1:
            # Formato sequ√™ncia: 5197-6020
            try:
                inicio, fim = map(int, arg.split('-'))
                if inicio <= fim:
                    edicoes.extend(range(inicio, fim + 1))
                else:
                    print(f"‚ö†Ô∏è Sequ√™ncia inv√°lida: {arg} (in√≠cio deve ser menor que fim)")
            except ValueError:
                print(f"‚ö†Ô∏è Formato de sequ√™ncia inv√°lido: {arg}")
        else:
            # Edi√ß√£o √∫nica
            try:
                edicoes.append(int(arg))
            except ValueError:
                print(f"‚ö†Ô∏è Edi√ß√£o inv√°lida: {arg}")
    
    # Remover duplicatas e ordenar
    edicoes = sorted(list(set(edicoes)))
    return edicoes

def main():
    if len(sys.argv) < 2:
        print("Uso: python alimenta_relatorios_vendas.py <edicoes>")
        print("Exemplos:")
        print("  Edi√ß√£o √∫nica:      python alimenta_relatorios_vendas.py 5197")
        print("  M√∫ltiplas edi√ß√µes: python alimenta_relatorios_vendas.py 5197 6020 6040 6700")
        print("  Sequ√™ncia:         python alimenta_relatorios_vendas.py 5197-6020")
        sys.exit(1)

    # Processar argumentos para obter lista de edi√ß√µes
    edicoes = parsear_argumentos(sys.argv[1:])
    
    if not edicoes:
        print("‚ùå Nenhuma edi√ß√£o v√°lida fornecida")
        sys.exit(1)

    print(f"üéØ Processando {len(edicoes)} edi√ß√£o(√µes): {edicoes}")
    
    navegador = criar_navegador()
    
    try:
        # Login √∫nico no in√≠cio
        fazer_login(navegador)
        fechar_popup(navegador)
        sleep(2)
        
        # Ir para sorteios uma vez
        if not navegar_para_sorteios(navegador):
            print("‚ùå Falha inicial ao navegar para sorteios")
            return
        
        sucessos = 0
        falhas = 0
        inexistentes = 0
        
        # Processar cada edi√ß√£o
        for i, edicao in enumerate(edicoes, 1):
            print(f"\nüìä Processando edi√ß√£o {i}/{len(edicoes)}: {edicao}")
            
            try:
                resultado = processar_edicao(navegador, edicao)
                
                if resultado:
                    sucessos += 1
                    print(f"‚úÖ Edi√ß√£o {edicao} processada com sucesso!")
                else:
                    # Verificar se √© inexistente ou erro t√©cnico baseado na mensagem
                    falhas += 1
                    print(f"‚ùå Falha ao processar edi√ß√£o {edicao}")
                
                # Voltar para sorteios (exceto na √∫ltima edi√ß√£o)
                if i < len(edicoes):
                    print("üîÑ Voltando para menu sorteios...")
                    if not navegar_para_sorteios(navegador):
                        print("‚ö†Ô∏è Falha ao voltar para sorteios, tentando continuar...")
                        sleep(2)
                        
            except Exception as e:
                falhas += 1
                print(f"‚ùå Erro cr√≠tico na edi√ß√£o {edicao}: {e}")
                
                # Tentar voltar para sorteios em caso de erro
                try:
                    navegar_para_sorteios(navegador)
                except:
                    print("‚ö†Ô∏è N√£o foi poss√≠vel voltar para sorteios ap√≥s erro")
        
        # Resumo final
        print(f"\nüéâ Processamento conclu√≠do!")
        print(f"‚úÖ Sucessos: {sucessos}")
        print(f"‚ùå Falhas/Inexistentes: {falhas}")
        print(f"üìä Total processado: {sucessos + falhas}/{len(edicoes)}")
        
        if sucessos > 0:
            print(f"üéØ Taxa de sucesso: {(sucessos/len(edicoes)*100):.1f}%")
        
    except Exception as e:
        print(f"‚ùå Erro cr√≠tico no script: {e}")
    finally:
        print("üîí Fechando navegador...")
        navegador.quit()

if __name__ == "__main__":
    main()
