// Importa√ß√µes necess√°rias
const qrcode = require('qrcode-terminal');
const { Client, MessageMedia } = require('whatsapp-web.js');
const { exec } = require('child_process'); // Para executar scripts Python

console.log('üöÄ Iniciando cliente WhatsApp...');

// Inicializa o cliente (sem LocalAuth)
const client = new Client();

// Vari√°vel para controlar se est√° pronto
let isReady = false;

// LOGS PARA TODOS OS EVENTOS POSS√çVEIS
client.on('qr', qr => {
    console.log('üì± QR Code gerado! Escaneie para conectar:');
    qrcode.generate(qr, { small: true });
});

client.on('ready', () => {
    console.log('‚úÖ EVENTO READY! WhatsApp conectado e pronto!');
    isReady = true;
});

client.on('authenticated', () => {
    console.log('üîê EVENTO AUTHENTICATED! Autenticado com sucesso!');
});

client.on('auth_failure', (msg) => {
    console.log('‚ùå EVENTO AUTH_FAILURE! Falha na autentica√ß√£o:', msg);
});

client.on('disconnected', (reason) => {
    console.log('üîå EVENTO DISCONNECTED! Desconectado:', reason);
    isReady = false;
});

client.on('loading_screen', (percent, message) => {
    console.log(`‚è≥ EVENTO LOADING_SCREEN! Carregando... ${percent}% - ${message}`);
});

client.on('change_state', (state) => {
    console.log(`üîÑ EVENTO CHANGE_STATE! Estado mudou para: ${state}`);
    if (state === 'CONNECTED') {
        console.log('üéØ CONECTADO! For√ßando ready...');
        isReady = true;
    }
});

// EVENTOS ADICIONAIS
client.on('contact_changed', (message, oldId, newId, isContact) => {
    console.log(`üë§ EVENTO CONTACT_CHANGED! ${oldId} -> ${newId}`);
});

client.on('group_join', (notification) => {
    console.log(`üë• EVENTO GROUP_JOIN! ${notification.id.user} entrou no grupo`);
});

client.on('group_leave', (notification) => {
    console.log(`üë• EVENTO GROUP_LEAVE! ${notification.id.user} saiu do grupo`);
});

client.on('message_create', (message) => {
    console.log(`üì® EVENTO MESSAGE_CREATE! De: ${message.from}, Corpo: "${message.body}"`);
});

client.on('message_revoke_me', (message, revoked_msg) => {
    console.log(`üö´ EVENTO MESSAGE_REVOKE_ME! Mensagem revogada`);
});

client.on('message_revoke_everyone', (message, revoked_msg) => {
    console.log(`üö´ EVENTO MESSAGE_REVOKE_EVERYONE! Mensagem revogada para todos`);
});

client.on('message_ack', (message, ack) => {
    console.log(`‚úì EVENTO MESSAGE_ACK! Confirma√ß√£o: ${ack}`);
});

client.on('media_uploaded', (message) => {
    console.log(`üìé EVENTO MEDIA_UPLOADED! M√≠dia enviada`);
});

// Inicializa o cliente (abre a sess√£o)
console.log('üîå Inicializando cliente...');
client.initialize();

// Timeout para for√ßar ready se n√£o acontecer em 30 segundos
setTimeout(() => {
    if (!isReady) {
        console.log('‚ö° For√ßando estado ready ap√≥s timeout...');
        isReady = true;
    }
}, 30000);

// LISTENER PRINCIPAL DE MENSAGENS
client.on('message', async msg => {
    console.log('üîî EVENTO MESSAGE! ================================');
    console.log(`üìû De: ${msg.from}`);
    console.log(`üí¨ Corpo: "${msg.body}"`);
    console.log(`üìù Tipo: ${msg.type}`);
    console.log(`üë§ isGroup: ${msg.from.includes('@g.us')}`);
    console.log(`‚úÖ isPrivate: ${msg.from.endsWith('@c.us')}`);
    console.log(`ü§ñ isReady: ${isReady}`);
    console.log('================================================');
    
    if (!isReady) {
        console.log('‚ö†Ô∏è Bot ainda n√£o est√° pronto! Ignorando mensagem...');
        return;
    }
    
    // S√≥ responde se vier de um contato privado (n√£o grupo)
    if (!msg.from.endsWith('@c.us')) {
        console.log(`‚ùå Ignorando mensagem de grupo: ${msg.from}`);
        return;
    }

    console.log(`‚úÖ Processando mensagem de contato privado: ${msg.from}`);

    // Tenta interpretar o texto como n√∫mero
    const input = msg.body.trim();
    console.log(`üìù Input recebido: "${input}"`);
    
    const number = parseInt(input, 10);
    console.log(`üî¢ N√∫mero parseado: ${number}`);

    // Verifica se √© n√∫mero
    if (!isNaN(number)) {
        console.log(`‚úÖ √â um n√∫mero v√°lido: ${number}`);
        
        // Verifica se est√° dentro do intervalo 5350‚Äì20000 (exemplo de regra)
        if (number >= 5350 && number <= 20000) {
            console.log(`‚úÖ N√∫mero est√° no intervalo v√°lido: ${number}`);
            
            // Executa o script Python imediatamente
            console.log(`üöÄ Enviando mensagem de processamento...`);
            await client.sendMessage(msg.from, `Processando a edi√ß√£o ${number}...`);

            // Chama o script Gerenciamento/scripts/relatorio_v2.py passando a edi√ß√£o como argumento
            console.log(`üêç Executando: python D:/Documentos/Workspace/Gerenciamento/scripts/relatorio_v2.py ${number}`);
            exec(`python D:/Documentos/Workspace/Gerenciamento/scripts/relatorio_v2.py ${number}`, async (err, stdout, stderr) => {
                if (err) {
                    console.error('‚ùå Erro na execu√ß√£o do Python:', err);
                    await client.sendMessage(msg.from, 'Erro ao processar a edi√ß√£o. Verifique ou contate o suporte.');
                } else {
                    console.log('‚úÖ Script Python executado com sucesso');
                    console.log('üìÑ stdout:', stdout);
                    
                    // Procura pela linha que cont√©m "PDF gerado:" para obter o caminho correto
                    const logs = stdout.trim().split('\n');
                    const pdfLine = logs.find(line => line.includes('PDF gerado:'));
                    
                    if (!pdfLine) {
                        console.error('‚ùå Linha com "PDF gerado:" n√£o encontrada no stdout');
                        await client.sendMessage(msg.from, 'Erro: PDF n√£o foi gerado corretamente.');
                        return;
                    }
                    
                    const pdfPath = pdfLine.replace('PDF gerado:', '').trim();
                    console.log(`üìÅ Caminho do PDF: ${pdfPath}`);

                    try {
                        // Envia o PDF para o WhatsApp
                        console.log(`üì§ Enviando PDF...`);
                        const media = MessageMedia.fromFilePath(pdfPath);
                        await client.sendMessage(msg.from, media);
                        await client.sendMessage(msg.from, 'Relat√≥rio gerado com sucesso!');
                        console.log(`‚úÖ PDF enviado com sucesso!`);
                    } catch (e) {
                        console.error('‚ùå Erro ao enviar PDF:', e);
                        await client.sendMessage(msg.from, 'Erro ao enviar o relat√≥rio. Verifique a edi√ß√£o ou contate o suporte.');
                    }
                }
            });
        } else {
            console.log(`‚ùå N√∫mero fora do intervalo (5350-20000): ${number}`);
        }
    } else {
        console.log(`‚ùå N√£o √© um n√∫mero v√°lido: "${input}"`);
    }
});

console.log('ü§ñ Bot iniciado e aguardando eventos...');
