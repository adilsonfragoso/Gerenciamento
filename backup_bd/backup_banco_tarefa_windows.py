#!/usr/bin/env python3
# backup_banco_tarefa_windows.py
"""
Configura uma tarefa agendada no Windows para execu√ß√£o di√°ria de backup √†s 03:20
Usa o Agendador de Tarefas do Windows (schtasks)
"""

import subprocess
import sys
import os
from pathlib import Path

def criar_tarefa_agendada():
    """Cria uma tarefa agendada no Windows"""
    
    # Caminhos
    script_dir = Path(__file__).parent.absolute()
    backup_script = script_dir / "backup_banco_de_dados.py"
    python_exe = sys.executable
    
    # Nome da tarefa
    nome_tarefa = "BackupBancoDiario"
    
    print("üóÇÔ∏è  Configurando tarefa agendada no Windows...")
    print(f"üìÅ  Diret√≥rio: {script_dir}")
    print(f"üêç  Python: {python_exe}")
    print(f"üìú  Script: {backup_script}")
    
    # Comando para criar a tarefa
    cmd_criar = [
        "schtasks", "/create",
        "/tn", nome_tarefa,
        "/tr", f'"{python_exe}" "{backup_script}"',
        "/sc", "daily",
        "/st", "03:20",
        "/sd", "01/01/2025",  # Data de in√≠cio
        "/ru", "SYSTEM",  # Executa como sistema para n√£o precisar de usu√°rio logado
        "/rl", "HIGHEST",  # N√≠vel mais alto de privil√©gios
        "/f"  # For√ßa sobrescrever se j√° existir
    ]
    
    try:
        # Remove tarefa existente se houver
        subprocess.run(
            ["schtasks", "/delete", "/tn", nome_tarefa, "/f"],
            capture_output=True
        )
        
        # Cria nova tarefa
        resultado = subprocess.run(cmd_criar, capture_output=True, text=True)
        
        if resultado.returncode == 0:
            print("‚úÖ  Tarefa agendada criada com sucesso!")
            print(f"‚è∞  Execu√ß√£o programada para todos os dias √†s 03:20")
            print(f"üìù  Nome da tarefa: {nome_tarefa}")
            
            # Mostra informa√ß√µes da tarefa
            mostrar_info_tarefa(nome_tarefa)
            
        else:
            print(f"‚ùå  Erro ao criar tarefa: {resultado.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå  Exce√ß√£o ao criar tarefa: {e}")
        return False
    
    return True

def mostrar_info_tarefa(nome_tarefa):
    """Mostra informa√ß√µes da tarefa criada"""
    try:
        resultado = subprocess.run(
            ["schtasks", "/query", "/tn", nome_tarefa, "/fo", "list"],
            capture_output=True, text=True
        )
        
        if resultado.returncode == 0:
            print("\nüìã  Informa√ß√µes da tarefa:")
            for linha in resultado.stdout.split('\n'):
                if any(info in linha for info in ["Nome da tarefa", "Pr√≥xima execu√ß√£o", "Status", "Hor√°rio de in√≠cio"]):
                    print(f"   {linha.strip()}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è   N√£o foi poss√≠vel obter informa√ß√µes da tarefa: {e}")

def remover_tarefa_agendada():
    """Remove a tarefa agendada"""
    nome_tarefa = "BackupBancoDiario"
    
    try:
        resultado = subprocess.run(
            ["schtasks", "/delete", "/tn", nome_tarefa, "/f"],
            capture_output=True, text=True
        )
        
        if resultado.returncode == 0:
            print(f"‚úÖ  Tarefa '{nome_tarefa}' removida com sucesso!")
        else:
            print(f"‚ùå  Erro ao remover tarefa: {resultado.stderr}")
            
    except Exception as e:
        print(f"‚ùå  Exce√ß√£o ao remover tarefa: {e}")

def verificar_tarefa():
    """Verifica se a tarefa existe e est√° ativa"""
    nome_tarefa = "BackupBancoDiario"
    
    try:
        resultado = subprocess.run(
            ["schtasks", "/query", "/tn", nome_tarefa],
            capture_output=True, text=True
        )
        
        if resultado.returncode == 0:
            print(f"‚úÖ  Tarefa '{nome_tarefa}' est√° configurada")
            mostrar_info_tarefa(nome_tarefa)
            return True
        else:
            print(f"‚ùå  Tarefa '{nome_tarefa}' n√£o encontrada")
            return False
            
    except Exception as e:
        print(f"‚ùå  Erro ao verificar tarefa: {e}")
        return False

if __name__ == "__main__":
    print("üïê  Configurador de Backup Agendado")
    print("=" * 50)
    
    if len(sys.argv) > 1:
        acao = sys.argv[1].lower()
        
        if acao == "criar":
            criar_tarefa_agendada()
        elif acao == "remover":
            remover_tarefa_agendada()
        elif acao == "verificar":
            verificar_tarefa()
        else:
            print("‚ùå  A√ß√£o inv√°lida. Use: criar, remover ou verificar")
    else:
        print("Escolha uma a√ß√£o:")
        print("1. Criar tarefa agendada")
        print("2. Verificar tarefa existente")  
        print("3. Remover tarefa agendada")
        
        escolha = input("\nEscolha (1-3): ").strip()
        
        if escolha == "1":
            criar_tarefa_agendada()
        elif escolha == "2":
            verificar_tarefa()
        elif escolha == "3":
            remover_tarefa_agendada()
        else:
            print("‚ùå  Escolha inv√°lida")
